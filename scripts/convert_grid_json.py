""" 
This script takes the contens of the Grid_Data_Form.yml file and parses information to a json file
that is added to grid-data base and checks for duplicate entries. It also automatically opens a
pull request for review with key information on the new grid formatparsed to the PR body.
"""

import argparse
import re
import os
import sys 
import json


def set_arg_parser():
  """
  Creates argument parser to take the body of the issue as an argument 

    :returns: argument parser
  """
  parser = argparse.ArgumentParser(description="Open issue body")
  parser.add_argument("file", help="The issue body to process")
  args = parser.parse_args()
  
  return args

def add_content_warning(warning):
  """
  Creates a list of strings to store and concact any generated warnings.

    :param warning: the warning message generated by sanity checks  
  """
  global warnings
  warnings.append(warning)


def create_grid_dict(match):
  """
  Generates a dictionary format from the loaded form contents and cleans the key-value pairs to 
  ensure consistent formatting.

  :param grid: the name of the dictionary 
  :param match: the identified key value pairs from the form
  :returns: dictionary containing the grid parameters from the form
  :raises ValueError: raises an exception if the number of lat or long points connot be converted 
                      to an integer value
  """
  grid = {}
  for key, value in match:
    clean = key.strip().lower().replace(" ", "")
    if clean in ("latitudepoints", "longitudepoints"):
      try: 
        grid[clean] = int(value.strip())
      except ValueError:
        print(f"Unable to convert {clean} to integer, storing value as string")
        add_content_warning("User has entered a non integer value in a field that requires a non-zero positive integer.")
        grid[clean] = value.strip()
    else: 
      grid[clean] = value.strip()
      
  return grid


def check_grid_dict_contents(grid):
  if not isinstance(grid['latitudepoints'], str) and not isinstance(grid['longitudepoints'], str):
    if grid['latitudepoints'] == 0 or grid['longitudepoints'] == 0:
      add_content_warning("User has entered a zero value in a field that requires a non-zero positive integer.")

def create_filename(grid):
  """
  Generates consistantly formatted filename from the form contents e.g.
  'g-<type>-<number of latitude points>-<number of longitude points>.json'.

  :param grid: dictionary containing the grid parameters from the form
  :returns: formatted filename of the json file
  """
  if grid['type'] == "simple":
    type = 's'
  elif grid['type'] == "complex":
    type = 'c'
  output = f"grid-database/g-{type}-{grid['latitudepoints']}-{grid['longitudepoints']}.json"
  
  if os.path.exists(output):
    add_content_warning(f"WARNING: THIS GRID IS A DUPLICATE, see database under {output}.")
    
  return output


def dump_to_json(grid, output):
  """
  Dumps and writes the dictionary contents to a json file with the formatted name. The function 
  also outputs the filename and duplicate status as a variable so it cant be printed to the body
  of the PR.

  :param grid: dictionary containing the grid parameters from the form
  :param output: formatted filename of the json file
  """
  with open(output, "w") as f:
    json.dump(grid, f, indent=2)
  print(f"Json file created successfully, file saved as {output}")

  
if __name__ == '__main__':
  warnings = []

  args = set_arg_parser()
  with open(args.file, "r") as f:
    form = f.read()

  match = re.findall(r"### (.+?)\n\s*\n?(.+)", form)

  grid = create_grid_dict(match)

  check_grid_dict_contents(grid)

  #check database directory exists
  os.makedirs("grid-database", exist_ok=True)

  output = create_filename(grid)

  #create and save json file 
  dump_to_json(grid, output)


  with open(os.environ["GITHUB_OUTPUT"], "a") as out:
    out.write(f"json_file={output}\n")
    out.write(f"\nwarnings={warnings}")
